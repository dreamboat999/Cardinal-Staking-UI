import { createStakePool, executeTransaction } from '@cardinal/staking'
import { Wallet } from '@metaplex/js'
import { useConnection, useWallet } from '@solana/wallet-adapter-react'
import { PublicKey } from '@solana/web3.js'
import { Header } from 'common/Header'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEnvironmentCtx } from 'providers/EnvironmentProvider'
import { useUserTokenData } from 'providers/TokenDataProvider'
import { useState } from 'react'
import { useEffect } from 'react'
import { listenerCount } from 'stream'
import styles from '../styles/Home.module.css'

function Admin() {
  const { setAddress, address} = useUserTokenData()
  const { connection } = useEnvironmentCtx()
  const wallet = useWallet()

  const [overlayText, setOverlayText] = useState('')
  const [collectionAddresses, setCollectionAddresses] = useState<string>('')
  const [creatorAddresses, setCreatorAddresses] = useState<string>('')
  const [authorizeNFT, setAuthorizeNFT] = useState<boolean>(false)

  useEffect(() => {
    if (wallet && wallet.connected && wallet.publicKey) {
      setAddress(wallet.publicKey.toBase58())
    }
  }, [wallet.publicKey])

  const FormFieldTitleInput = (props: {
    title: string
    htmlFor: string
    description: string
  }) => (
    <>
      <label
        className="mb-2 block text-xs font-bold uppercase tracking-wide text-gray-200"
        htmlFor={props.htmlFor}
      >
        {props.title}
      </label>
      <p className="mb-2 text-sm italic text-gray-300">{props.description}</p>
    </>
  )

  const handleCreation = async () => {
    try {
      if (!address) {
        throw 'Wallet not connected'
      }
      if (!wallet.wallet) {
        throw 'Wallet not connected'
      }

      const collectionPublicKeys = collectionAddresses.length > 0 ? collectionAddresses
        .split(',')
        .map((address) => new PublicKey(address.trim())) : []
      const creatorPublicKeys = creatorAddresses.length > 0 ? creatorAddresses
        .split(',')
        .map((address) => new PublicKey(address.trim())) : []

      const stakePoolParams = {
        requiresCollections:
          collectionPublicKeys.length > 0 ? collectionPublicKeys : undefined,
        requiresCreators:
          creatorPublicKeys.length > 0 ? creatorPublicKeys : undefined,
        requiresAuthorization: authorizeNFT,
        overlayText: overlayText.length > 0 ? overlayText : undefined,
      }

      const [transaction, stakePool] = await createStakePool(
        connection,
        wallet as Wallet,
        stakePoolParams
      )

      await executeTransaction(connection, wallet as Wallet, transaction, {
        silent: false,        
        signers: [],
      })

      alert('Stake pool created! Stake Pool Address: ' + stakePool.toString())

    } catch (e) {
      alert(`Error creating stake pool: ${e}`)
    } finally {
      
    }
  }

  return (
    <div>
      <Head>
        <title>Cardinal Staking UI</title>
        <meta name="description" content="Generated by Cardinal Staking UI" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <div className="container mx-auto max-h-[90vh] w-full bg-[#1a1b20]">
          <Header />
          <div className="my-2 grid h-full grid-cols-1 gap-4">
            <div className="rounded-md bg-white bg-opacity-5 p-10 text-gray-200">
              <p className="text-lg font-bold">Create Staking Pool</p>
              <p className="mt-1 mb-2 text-sm">
                All parameters for staking pool are optional
              </p>
              <form className="w-full max-w-lg">
                <div className="-mx-3 flex flex-wrap">
                  <div className="mb-6 mt-4 w-full px-3 md:mb-0">
                    <FormFieldTitleInput
                      title={'Overlay Text'}
                      htmlFor={'overlay-text'}
                      description={'Text to display over the rental receipt'}
                    />
                    <input
                      className="mb-3 block w-full appearance-none rounded border border-gray-500 bg-gray-700 py-3 px-4 leading-tight text-gray-200 placeholder-gray-500 focus:bg-gray-800 focus:outline-none"
                      id={'overlay-text'}
                      type="text"
                      placeholder={'RENTED'}
                      value={overlayText}
                      onChange={(e) => {
                        setOverlayText(e.target.value)
                      }}
                    />
                  </div>
                </div>
                <div className="-mx-3 flex flex-wrap">
                  <div className="mb-6 mt-4 w-full px-3 md:mb-0">
                    <FormFieldTitleInput
                      title={'Collection Addresses []'}
                      htmlFor={'collection-addresses'}
                      description={
                        'Only allow NFTs with these collection addresses (separated by commas)'
                      }
                    />
                    <input
                      className="mb-3 block w-full appearance-none rounded border border-gray-500 bg-gray-700 py-3 px-4 leading-tight text-gray-200 placeholder-gray-500 focus:bg-gray-800 focus:outline-none"
                      id={'collection-addresses'}
                      type="text"
                      placeholder={'Cmwy..., A3fD...'}
                      value={collectionAddresses}
                      onChange={(e) => {
                        setCollectionAddresses(e.target.value)
                      }}
                    />
                  </div>
                </div>
                <div className="-mx-3 flex flex-wrap">
                  <div className="mb-6 mt-4 w-full px-3 md:mb-0">
                    <FormFieldTitleInput
                      title={'Creator Addresses []'}
                      htmlFor={'creator-addresses'}
                      description={
                        'Only allow NFTs with these creator addresses (separated by commas)'
                      }
                    />
                    <input
                      className="mb-3 block w-full appearance-none rounded border border-gray-500 bg-gray-700 py-3 px-4 leading-tight text-gray-200 placeholder-gray-500 focus:bg-gray-800 focus:outline-none"
                      id={'creator-addresses'}
                      type="text"
                      placeholder={'Cmwy..., A3fD...'}
                      value={creatorAddresses}
                      onChange={(e) => {
                        setCreatorAddresses(e.target.value)
                      }}
                    />
                  </div>
                </div>
                <div className="-mx-3 flex flex-wrap">
                  <div className="mb-6 mt-4 w-full px-3 md:mb-0">
                    <label
                      className="mb-2 block inline-block text-xs font-bold uppercase tracking-wide text-gray-200"
                      htmlFor="require-authorization"
                    >
                      Authorize NFTs
                    </label>
                    <p className="mb-2 text-sm italic text-gray-300">
                      If selected, NFTs must be authorized on-chain before
                      entering the pool
                    </p>
                    <input
                      className="mb-3"
                      id="require-authorization"
                      type="checkbox"
                      checked={authorizeNFT}
                      onChange={(e) => {
                        setAuthorizeNFT(e.target.checked)
                      }}
                    />{' '}
                    <span className="my-auto text-sm">
                      Require Authorization
                    </span>
                  </div>
                </div>
                <button type="button" className="mt-4 rounded-md bg-blue-700 px-4 py-2" onClick={() => handleCreation()}>
                  Create Pool
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Admin
